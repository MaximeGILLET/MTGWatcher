@model MTGWatcher.Models.CardListViewModel
@{
    ViewBag.Title = "Index";
}
@using System.Text.RegularExpressions
<div class="col-lg-12">
   

    @using (Html.BeginForm("RefreshCards", "Cards", FormMethod.Get, new { @role = "form", @id = "cardRefresh" }))
    {
        <input type="hidden" name="param" value="" />
        <input class="btn btn-default" id="btnSubmit" type="submit" value="Refresh Cards" />
       
    }
    @using (Html.BeginForm("RefreshSets", "Cards", FormMethod.Post, new { @role = "form", @id = "setRefresh" }))
    {
        <input type="hidden" name="param" value="" />
        <input class="btn btn-default" id="btnSubmit" type="submit" value="Refresh Sets" />
     
    }
    <div id="progressBar" class="progress" hidden>
        <div id="bar" class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%">
            <span class="sr-only"></span>
        </div>
    </div>
    @using (Html.BeginForm("Index", "Cards", FormMethod.Post, new { @class = "form-inline", @role = "form", @id = "CardsSearchForm" }))
    {
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    <input type="text" name="cardSearch" id="cardSearch" class="form-control" placeholder="Search for a card...">
                    <span class="input-group-btn">
                        <button class="btn btn-default" type="submit">Go!</button>
                    </span>
                </div><!-- /input-group -->
            </div><!-- /.col-lg-6 -->
        </div><!-- /.row -->
        @Html.HiddenFor(m => m.Page)
        @Html.HiddenFor(m => m.SortField)
        @Html.HiddenFor(m => m.SortDir)
        @Html.HiddenFor(m => m.PageSize)
        @Html.HiddenFor(m => m.ResultCount)
        <div class="panel panel-default" id="panelResults">
            <div class="panel-heading" style="padding: 5px 15px; vertical-align: middle;">
                <h4 class="panel-title" style="display: inline-block; vertical-align: middle; width: 100%;">
                    <span class="form-group input-group-sm pull-right">
                        &nbsp;Items per page&nbsp;
                        @Html.DropDownListFor(m => m.PageSize, new MultiSelectList(new List<int>() { 25, 50, 100, 500 }), new { @class = "form-control" })
                    </span>Results <i>(<span id="nbResult">@Model.ResultCount</span>)</i>
                </h4>
            </div>
            <div id="collapseResults" class="panel-collapse collapse in">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-lg-12">
                            <div id="grid">
                                @{
                                    var grid = new WebGrid(canPage: true, canSort: true, defaultSort: "", rowsPerPage: Model.PageSize, pageFieldName: "Page", sortDirectionFieldName: "SortDir", sortFieldName: "SortField");
                                    grid.Bind(Model.Results, autoSortAndPage: true, rowCount: Model.ResultCount);

                                    var columns = new List<WebGridColumn>();

                                    columns.Add(grid.Column("Name", format: @<text> <a href="/Cards/Details/@(((MTGWatcher.Models.Card)((WebGridRow)item).Value).CardId)">@(((MTGWatcher.Models.Card)((WebGridRow)item).Value).Name)</a></text>));
                                    columns.Add(grid.Column("ManaCost", format: (item) => {

                                        var rgx = new Regex(@"\{*\}*");
                                        var parsed = rgx.Replace(((MTGWatcher.Models.Card)((WebGridRow)item).Value).ManaCost??"", "");
                                        var array = parsed.ToCharArray();
                                        var tmpHtml = "";
                                        foreach (var mana in array)
                                        {
                                            tmpHtml+=string.Format("<object type='image/svg+xml' data='../Content/Symbols/{0}.svg' width='16' height='16'></object>", mana);
                                        }

                                        return new HtmlString(tmpHtml);
                                    }));

                                    columns.Add(grid.Column("PlainTypes", "Types"));
                                    columns.Add(grid.Column("PowerThoughness", "Power"));
                                    /*columns.Add(grid.Column("Rarity", format: (item) => {

                                        return new HtmlString(string.Format("<b class='gradient-{0}'>{1}</b>",((MTGWatcher.Models.Card)((WebGridRow)item).Value).Rarity.ToLower(), ((MTGWatcher.Models.Card)((WebGridRow)item).Value).Rarity));
                                    }));*/

                                   @grid.GetHtml(htmlAttributes: new { id = "CardList" }, tableStyle: "table-striped table-hover table-bordered", columns: columns)
                                    if (Model.ResultCount > Model.PageSize)
                                    {
                                        @grid.PagerList(WebGridPagerModes.FirstLast | WebGridPagerModes.Numeric, paginationStyle: "pagination paginationlist pagination-md pull-right")
                                    }
                                }
                                @Html.Hidden("dir", grid.SortDirection)
                                @Html.Hidden("col", grid.SortColumn)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
}
</div>
<style>
    .ui-autocomplete{
        background-color:white;
        border:solid 2px;
        overflow:auto;
        max-height:300px;
    }
     .ui-autocomplete li{
         list-style-type: none;
         left:0;   
    }
    .ui-autocomplete li:hover{
         background-color:#f5f5f5;
         list-style-type:circle;        
    }
</style>
<script>
    var myRoutine;

    function UpdateProgressBar() {

        $.get("/Cards/RefreshProgress", function (response, status) {
                
            var newprogress = response.data * 100;
            console.log(newprogress);
            if (newprogress == 100) clearInterval(myRoutine);
            $("#bar").attr('aria-valuenow', newprogress).css('width', newprogress);
        });

    }

    $(document).ready(function () {
        $('#cardSearch').autocomplete({
            source: '@Url.Action("AutoComplete")'
        });

        jQuery.ui.autocomplete.prototype._resizeMenu = function () {
            var ul = this.menu.element;
            ul.outerWidth(this.element.outerWidth());
        }
        /*
        $('#cardRefresh').submit(function () {

            $("#progressBar").show();
            myRoutine = setInterval(UpdateProgressBar, 1000);
               
        });*/

        $('#setRefresh').submit(function () {

            $("#progressBar").show();
            myRoutine = setInterval(UpdateProgressBar, 1000);
        });           

    })

    function GenerateManacost(code) {

        var mana = code.replace(/\{*\}*/gi, "").split("");

            
    }

</script>
